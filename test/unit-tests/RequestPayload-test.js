const TestUtils = require("./utils/TestUtils");

const fs = require("fs");
const assert = require("chai").assert;

/**
 * Validates request payloads generated by remote-pay-cloud against golden data.
 * Test case files located in ./resources/request-validation.
 */
describe('validateRequestPayloads()', function () {

    const remoteApplicationID = "remote-pay-cloud-test";
    const requestValidationTestCasePath = `${__dirname}/resources/request-validation`;
    let testCases = [];
    let device = null;

    before(function () {
        device = TestUtils.getWSDevice(remoteApplicationID);
    });

    // Grab all the JSON test files from the file system.
    const files = fs.readdirSync(requestValidationTestCasePath);
    // Populate the tests array with JSON.
    files.forEach((file) => {
        testCases.push(JSON.parse(fs.readFileSync(`${requestValidationTestCasePath}/${file}`), "utf8"));
    });

    // Execute the tests.
    testCases.forEach(function (testCase) {
        it(`generates a valid ${testCase.method} request`, function (done) {
            device.sendRemoteMessage = function (remoteMessage) {
                assert.equal(remoteMessage.payload.replace(/\s+/g, ""), testCase.expected.payload.replace(/\s+/g, "", "The remoteMessage payload does not match the expected payload."));
                assert(remoteMessage.remoteApplicationID && remoteMessage.remoteApplicationID.length > 0, "The remoteMessage has an undefined or null remoteApplicationID.");
                assert(remoteMessage.remoteSourceSDK && remoteMessage.remoteSourceSDK.length > 0, "The remoteMessage has an undefined or null remoteSourceSDK.");
                done();
            };
            device[testCase.method](testCase.args);
        });
    });

    // Execute a manual test to verify the the remoteApplicationID is an exact match.
    const remoteApplicationIdTestCase = JSON.parse(fs.readFileSync(`${__dirname}/resources/remoteApplicationID.json`));
    it('generated request has the correct remoteApplicationID', function(done) {
        device.sendRemoteMessage = function (remoteMessage) {
            assert.equal(remoteMessage.remoteApplicationID, remoteApplicationID, "The remoteMessage's remoteApplicationID does not match the expected remoteApplicationID.");
            done();
        };
        device[remoteApplicationIdTestCase.method](remoteApplicationIdTestCase.args);
    });

});

